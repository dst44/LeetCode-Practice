class Solution {
    
    class Node{
        int a;
        int b;
        Node(int a,int b){
            this.a = a;
            this.b = b;
        }
        
        @Override
        public boolean equals(Object obj) { 

            // checking if both the object references are  
            // referring to the same object. 
            if(this == obj) 
                return true; 

            // it checks if the argument is of the  
            // type Geek by comparing the classes  
            // of the passed argument and this object. 
            // if(!(obj instanceof Geek)) return false; ---> avoid. 
            if(obj == null || obj.getClass()!= this.getClass()) 
                return false; 

            // type casting of the argument.  
            Node noda = (Node) obj; 

            // comparing the state of argument with  
            // the state of 'this' Object. 
            if(noda.a == this.a && noda.b == this.b){
                return true;
            } 
            return false;
        } 
        
        @Override
        
        public int hashCode(){
            // We are returning the Geek_id  
            // as a hashcode value. 
            // we can also return some  
            // other calculated value or may 
            // be memory address of the  
            // Object on which it is invoked.  
            // it depends on how you implement  
            // hashCode() method. 
            return Objects.hash(a,b);
        }
    }

    
    public int minAreaRect(int[][] points) {
        
        int n = points.length;
        int area = 1600000001;
        
        HashSet<Node> h = new HashSet<Node>();
        
        for(int i =0 ;i< n ;i++){
            Node node = new Node(points[i][0], points[i][1]);
            h.add(node);  
        }
        for(int i = 0; i<n;i++){
            int x1= points[i][0];
            int y1 = points[i][1];
            for(int j = i+1; j<n;j++){

                int x2 = points[j][0];
                int y2 = points[j][1];
                
                Node alpha = new Node(x2 , y1);
                Node beta = new Node(x1 , y2);
                
                if(h.contains(alpha)==true && h.contains(beta)==true){
                   
                    int temp = Math.abs((x2-x1)*(y2-y1));
                    if(temp<area && temp!=0){
                        area = temp;
                    }
                }
            }
        }
        
        if(area==1600000001){
            return 0;
        }
        
        return area;
        
    }
}
